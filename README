Project 1

a) Group members:
    Yu Wang (yw2684)
    Chia-Jung Lin (cl3295)

b) Files list:
    /--+--README
       +--main.py
       +--search.py
       +--interface.py
       +--parser.py
       +--transcript_musk.txt
       +--transcript_gates.txt
       +--transcript_taj_mahal.txt

c) Description of how to run:

    python main.py <bing account key> <precision> <query>
    where:
        - bing account key is your Bing Search Account Key
        - precision is the target value for precision@10, a real between 0 and 1
        - query is a list of words seperated by space in single quotes

    For example, when we want to search about 'taj mahal', we can run the following command in our project repository:
    python main.py KtKgk8Mo5p6/rJE0FnlmA8qKVi1F7kS3OQbxik1ZnCg 0.9 'taj mahal'


d) Internal design:

    Our project has four components, which are search, parser, user interface and the main controller.

    Main controller is main.py and it controls the main workflow of our program:
    1) It takes the origin input from the user which includes the Bing account key, target precision and query words list
    2) With the above inputs, it calls search component to search the query on Bing with the Bing account key
    3) It calls the parse component to parse the search result into Siteinfo objects from which we can easily get the url, title and description of each search result object.
    4) It calls the user interface component to show the top-10 search results to the user (in command line), and to ask user mark which results are relevent
    5)
        - If the relevence precison is 0, it calls user interface component to output termination message and terminates the program
        - If the relevence precision is less than the target precision, it calls search component to re-phrase the query, which includes expanding the query with new terms and reorder the terms in the query, and goes back to step 2) and does the search again.
        - If the relevence precision is equal or larger than target precision, it calls the user interface component to output message and terminates the program

    Search component is search.py and is in charge of making search requests to Bing server and geting the response back, as well as expanding the query with new terms and reordering query with relevence feedback from user.

    Parse component is parse.py. It parses the xml doc returned by Bing into Siteinfo objects, from which we can easily get the url, title and description of each search result item.

    User interface component is interface.py. It's in charge of printing out messages and searching results in terminal and interacting with user.


e) Query modification method:

The query modification algorithm is composed of the following parts:
1) Remove punctuations and stopwords
        When calculating weights, we ignore the stopwords that are listed in NLTK package except the ones that are already included in query, if there is any.

2) Give different weights to title and description
        From our observation, some words that frequently appear in description tend to lead the query to another topic that is somehow related to the original topic. Thus, we lower the weight in description to lower the chance of deviation. We set topic weight to 1.2 and description weight to 0.9. The weights are set emperically.

3) Compute tf-idf weight for document vector
        tf is the term frequency in document and idf(t) = log N/M(t), where M is the number of documents that contain term t. Then we compute tfidf = tf * idf. We use the ifidf weight to construct document vector.

4) normalize document vector
        We further normalized the tf-idf vector for each document before going through step 5.

5) Rocchio algorithm
        Rocchio algorithm can be represented as:
                        Q1 = alpha*Q0 + beta*sum(R/n1) - gamma*sum(NR/n2)
        We set alpha=1, beta=0.8, gamma=0.15. The value of alpha and gamma is the same as the suggested value from the original algorithm. We raised bata by 0.8 after experiments.

6) Final evaluation (query expansion and reordering)
        After the final scores of all terms are calculated, we sort the terms with descreasing scores, and try to pick the top-2 new terms t1, t2 with highest score to add them into the new query. However, if these two new terms' scores differ a lot, say, t1's score is more than 1.5*t2's score, we abandon t2 and only add t1 to the new query. The order of all terms in this new query, including the old query terms and new terms, is decided by their score, from the highest to the lowest. 


f) Bing Search Account Key: KtKgk8Mo5p6/rJE0FnlmA8qKVi1F7kS3OQbxik1ZnCg

g) Additional information:

1) Parsing (stemming):

    We considered using stemming technique at first. However, stemming sometimes makes ambiguous term even more ambiguous. For instanse, some last names are plural terms of nouns. If we search 'Keanu', the top results will be Keanu Reeves. After stemming, our augment query will become keanu reeve. Of course we can expect that search engine like Bing will automatically correct such mistake, but we still don't want to add incorrect term to the query. Because the lack of dataset for evaluation, we decide to drop this process.

2) Result evaluation:

    We ran our program on the three examples "musk", "gates" and "taj mahal", and the program can achieve a precision of 0.9 on them all after 1 iteration. We also tried some other query terms. 'Columbia' targeting for Columbia University is one of the most challenging query terms we tried. Our query expansion algorithm gave different angmenting suggestions with the sample program. If 'columbia law school' is counted as relevant to Columbia University, then our program can achieve precision of 0.9 in the first query expansion. However, if it's not, then our program will suffer 4 to 5 rounds of query expansion and then ends with results of Columbia Business School.

    We also found that the results returned by Bing also affects our results a lot. When we were first designing our query expansion algorithm, 'gates' always led to terms 'bill' and 'melinda'. The score of 'melinda' is surprisingly high. We want to avoid shifting the search to 'melinda gates', so we spent some time to figure out how to lower the weight of target-related terms. Then one day the top ten results changed. To be specific, 'Bill & Melinda Gates Foundation' disappeared from the first ten results, and thus the score of 'melinda' dropped. Before the search results changed, we could only mitigate the effect by adjusting weights between 'title' and 'description'.


h) Reference

[1]  Introduction to Information Retrieval, Cambridge University Press. 2008, Christopher D. Manning, Prabhakar Raghavan and Hinrich Sch√ºtze, http://nlp.stanford.edu/IR-book/
